// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.AccessControl.Feature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("Features", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8636),
                            Description = "Allows creating, updating, and cancelling bookings",
                            IsActive = true,
                            IsDeleted = false,
                            Key = "BOOKING_MANAGEMENT",
                            Name = "Manage Bookings",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8638)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8644),
                            Description = " Allows adding, updating, and removing rooms",
                            IsActive = true,
                            IsDeleted = false,
                            Key = "ROOM_MANAGEMENT",
                            Name = "Manage Rooms",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8646)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8652),
                            Description = "Allows viewing various system reports",
                            IsActive = true,
                            IsDeleted = false,
                            Key = "REPORTS_VIEW",
                            Name = "View Reports",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8654)
                        });
                });

            modelBuilder.Entity("Domain.Models.AccessControl.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8610),
                            Description = "System administrator with full access",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Admin",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8612)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8618),
                            Description = "Can make reservations and manage bookings",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Customer",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8620)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8626),
                            Description = "Handles reservations and room management",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Staff",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8628)
                        });
                });

            modelBuilder.Entity("Domain.Models.AccessControl.RoleFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FeatureId");

                    b.HasIndex("RoleId", "FeatureId")
                        .IsUnique();

                    b.ToTable("RoleFeatures", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8661),
                            FeatureId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 1,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8663)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8668),
                            FeatureId = 2,
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 1,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8670)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8676),
                            FeatureId = 3,
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 1,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8678)
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8683),
                            FeatureId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 3,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8685)
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8690),
                            FeatureId = 1,
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 2,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8692)
                        });
                });

            modelBuilder.Entity("Domain.Models.AccessControl.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8700),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 2,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8702),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8707),
                            IsActive = true,
                            IsDeleted = false,
                            RoleId = 3,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8709),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Reservation.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOut")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId", "CheckIn");

                    b.HasIndex("RoomId", "CheckOut");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Domain.Models.Room.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Facilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Wi-Fi"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Air Conditioning"
                        },
                        new
                        {
                            Id = 3,
                            Name = "TV"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Private Bathroom"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Work Desk"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Private Balcony"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Jacuzzi"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hair Dryer"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Electric Kettle"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Daily Housekeeping"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Sea View"
                        });
                });

            modelBuilder.Entity("Domain.Models.Room.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Domain.Models.Room.RoomFacility", b =>
                {
                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RoomId", "FacilityId");

                    b.HasIndex("FacilityId");

                    b.ToTable("RoomFacilities");
                });

            modelBuilder.Entity("Domain.Models.Room.RoomPicture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("RoomPictures");
                });

            modelBuilder.Entity("Domain.Models.Users.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8588),
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8590),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.Staff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Staff", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8599),
                            HireDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8592),
                            IsActive = true,
                            IsDeleted = false,
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8600),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Cairo",
                            City = "Cairo",
                            Country = "Egypt",
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8568),
                            Email = "customer1@email.com",
                            FirstName = "Ali",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Mahmoud",
                            PasswordHash = "hashed_password_1",
                            PhoneNumber = "0100000001",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8570),
                            Username = "customer1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Giza",
                            City = "Giza",
                            Country = "Egypt",
                            CreatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8578),
                            Email = "staff1@email.com",
                            FirstName = "Sara",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Youssef",
                            PasswordHash = "hashed_password_2",
                            PhoneNumber = "0100000002",
                            UpdatedDate = new DateTime(2025, 10, 7, 16, 10, 17, 535, DateTimeKind.Local).AddTicks(8580),
                            Username = "staff1"
                        });
                });

            modelBuilder.Entity("Domain.Models.AccessControl.RoleFeature", b =>
                {
                    b.HasOne("Domain.Models.AccessControl.Feature", "Feature")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.AccessControl.Role", "Role")
                        .WithMany("RoleFeatures")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feature");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Models.AccessControl.UserRole", b =>
                {
                    b.HasOne("Domain.Models.AccessControl.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Domain.Models.Users.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Reservation.Reservation", b =>
                {
                    b.HasOne("Domain.Models.Users.Customer", null)
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room.Room", null)
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Room.RoomFacility", b =>
                {
                    b.HasOne("Domain.Models.Room.Facility", "Facility")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Room.Room", "Room")
                        .WithMany("RoomFacilities")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Facility");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Room.RoomPicture", b =>
                {
                    b.HasOne("Domain.Models.Room.Room", "Room")
                        .WithMany("Pictures")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Domain.Models.Users.Customer", b =>
                {
                    b.HasOne("Domain.Models.Users.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Domain.Models.Users.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.Users.Staff", b =>
                {
                    b.HasOne("Domain.Models.Users.User", "User")
                        .WithOne("Staff")
                        .HasForeignKey("Domain.Models.Users.Staff", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Models.AccessControl.Feature", b =>
                {
                    b.Navigation("RoleFeatures");
                });

            modelBuilder.Entity("Domain.Models.AccessControl.Role", b =>
                {
                    b.Navigation("RoleFeatures");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Domain.Models.Room.Facility", b =>
                {
                    b.Navigation("RoomFacilities");
                });

            modelBuilder.Entity("Domain.Models.Room.Room", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Reservations");

                    b.Navigation("RoomFacilities");
                });

            modelBuilder.Entity("Domain.Models.Users.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Domain.Models.Users.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
